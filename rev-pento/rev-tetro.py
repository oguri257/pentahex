#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import rev

UsageText = '''
  制約の最適化レベル K = 0, 1, 2, 3 （2が最も制約生成に時間がかかる）

  使用方法
    $ python3 rev-tetro.py [ --opt K ]
      例：
      h*wの領域にテトロミノピースを敷き詰める制約
      MinBoardは存在しない
      $ python3 rev-tetro.py 6 > revJ6.pb
  '''

################################################################################
## N=1 のときの盤面の情報
##
##     i行j列のマス(i,j) where i>=0 and j>=0 を列挙して表現
##     0
##     0   0
##     0 0 0
##
##MinBoard = {(0, 0), (0, 1), (0, 2), (1, 2), (2, 1), (2, 2)}
#scp -r rev-tetro.py oguri@atlas.trs.css.i.nagoya-u.ac.jp: /home/fs5/common/DB/project/sharpsat/tools/git
h=5
w=8

################################################################################
##
## タイルの情報（使用するピースを登録）
## P1:
##     0
##     0   0
##     0 0 0
##
## (type, cell list) のリスト。ここで、長方形は type=0 とすること。
##   １以上の type はカラーで結果表示されることになる
PrimTilePat = [
        # L
        (0, {(0,0),(0,1),(0,2),(1,2)}), \
        # ジグザグ
        (1, {(0,0),(0,1),(1,1),(1,2)}), \
        # 長方形(1x4)
        (2, {(0,0),(0,1),(0,2),(0,3)}), \
        # ト
        (3, {(0,0),(0,1),(0,2),(1,1)}), \
        # 正方形(2x2)
        (4, {(0,0),(0,1),(1,0),(1,1)}), \
        ]

## メイン関数
if __name__ == "__main__":
    rev.gen_reptile(PrimTilePat, UsageText)
